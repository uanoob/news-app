// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommentForm CommentFormComponent initial render correctly CommentFormComponent 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CommentFormComponent
    articleId=""
    classes={
      Object {
        "container": "",
        "textField": "",
      }
    }
    clearTextField={[MockFunction]}
    commentId=""
    commentText="PropTypes.string"
    description="PropTypes.string.isRequired"
    dialog={false}
    handleDialogClick={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    onCreateComment={
      [MockFunction] {
        "calls": Array [
          Array [
            "",
            "",
            "PropTypes.string.isRequired",
            "PropTypes.string.isRequired",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    onUpdateComment={
      [MockFunction] {
        "calls": Array [
          Array [
            "",
            "",
            "123",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    title="PropTypes.string.isRequired"
    userId="PropTypes.string.isRequired"
    userName="PropTypes.string.isRequired"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "aria-labelledby": "form-dialog-title",
      "children": Array [
        <WithStyles(DialogTitle)
          id="form-dialog-title"
        >
          PropTypes.string.isRequired
        </WithStyles(DialogTitle)>,
        <WithStyles(DialogContent)>
          <WithStyles(DialogContentText)>
            PropTypes.string.isRequired
          </WithStyles(DialogContentText)>
          <TextField
            autoFocus={true}
            className=""
            error={false}
            fullWidth={true}
            id="comment-textfield-input"
            label="Your comment here"
            margin="normal"
            multiline={true}
            onChange={[Function]}
            required={false}
            rows="4"
            select={false}
            value="PropTypes.string"
            variant="outlined"
          />
        </WithStyles(DialogContent)>,
        <WithStyles(DialogActions)>
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
          >
            Cancel
          </WithStyles(Button)>
          <WithStyles(Button)
            color="primary"
            disabled={true}
            id="comment-submit-button"
            onClick={[Function]}
            type="submit"
            variant="contained"
          >
            Send
            <pure(SendIcon)>
              send
            </pure(SendIcon)>
          </WithStyles(Button)>
        </WithStyles(DialogActions)>,
      ],
      "onClose": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "open": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "PropTypes.string.isRequired",
          "id": "form-dialog-title",
        },
        "ref": null,
        "rendered": "PropTypes.string.isRequired",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(DialogContentText)>
              PropTypes.string.isRequired
            </WithStyles(DialogContentText)>,
            <TextField
              autoFocus={true}
              className=""
              error={false}
              fullWidth={true}
              id="comment-textfield-input"
              label="Your comment here"
              margin="normal"
              multiline={true}
              onChange={[Function]}
              required={false}
              rows="4"
              select={false}
              value="PropTypes.string"
              variant="outlined"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "PropTypes.string.isRequired",
            },
            "ref": null,
            "rendered": "PropTypes.string.isRequired",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoFocus": true,
              "className": "",
              "error": false,
              "fullWidth": true,
              "id": "comment-textfield-input",
              "label": "Your comment here",
              "margin": "normal",
              "multiline": true,
              "onChange": [Function],
              "required": false,
              "rows": "4",
              "select": false,
              "value": "PropTypes.string",
              "variant": "outlined",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
            >
              Cancel
            </WithStyles(Button)>,
            <WithStyles(Button)
              color="primary"
              disabled={true}
              id="comment-submit-button"
              onClick={[Function]}
              type="submit"
              variant="contained"
            >
              Send
              <pure(SendIcon)>
                send
              </pure(SendIcon)>
            </WithStyles(Button)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Cancel",
              "color": "primary",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Cancel",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Send",
                <pure(SendIcon)>
                  send
                </pure(SendIcon)>,
              ],
              "className": undefined,
              "color": "primary",
              "disabled": true,
              "id": "comment-submit-button",
              "onClick": [Function],
              "type": "submit",
              "variant": "contained",
            },
            "ref": null,
            "rendered": Array [
              "Send",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "send",
                  "className": undefined,
                },
                "ref": null,
                "rendered": "send",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "aria-labelledby": "form-dialog-title",
        "children": Array [
          <WithStyles(DialogTitle)
            id="form-dialog-title"
          >
            PropTypes.string.isRequired
          </WithStyles(DialogTitle)>,
          <WithStyles(DialogContent)>
            <WithStyles(DialogContentText)>
              PropTypes.string.isRequired
            </WithStyles(DialogContentText)>
            <TextField
              autoFocus={true}
              className=""
              error={false}
              fullWidth={true}
              id="comment-textfield-input"
              label="Your comment here"
              margin="normal"
              multiline={true}
              onChange={[Function]}
              required={false}
              rows="4"
              select={false}
              value="PropTypes.string"
              variant="outlined"
            />
          </WithStyles(DialogContent)>,
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
            >
              Cancel
            </WithStyles(Button)>
            <WithStyles(Button)
              color="primary"
              disabled={true}
              id="comment-submit-button"
              onClick={[Function]}
              type="submit"
              variant="contained"
            >
              Send
              <pure(SendIcon)>
                send
              </pure(SendIcon)>
            </WithStyles(Button)>
          </WithStyles(DialogActions)>,
        ],
        "onClose": [MockFunction] {
          "calls": Array [
            Array [],
            Array [],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "open": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "PropTypes.string.isRequired",
            "id": "form-dialog-title",
          },
          "ref": null,
          "rendered": "PropTypes.string.isRequired",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(DialogContentText)>
                PropTypes.string.isRequired
              </WithStyles(DialogContentText)>,
              <TextField
                autoFocus={true}
                className=""
                error={false}
                fullWidth={true}
                id="comment-textfield-input"
                label="Your comment here"
                margin="normal"
                multiline={true}
                onChange={[Function]}
                required={false}
                rows="4"
                select={false}
                value="PropTypes.string"
                variant="outlined"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "PropTypes.string.isRequired",
              },
              "ref": null,
              "rendered": "PropTypes.string.isRequired",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoFocus": true,
                "className": "",
                "error": false,
                "fullWidth": true,
                "id": "comment-textfield-input",
                "label": "Your comment here",
                "margin": "normal",
                "multiline": true,
                "onChange": [Function],
                "required": false,
                "rows": "4",
                "select": false,
                "value": "PropTypes.string",
                "variant": "outlined",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Button)
                color="primary"
                onClick={[Function]}
              >
                Cancel
              </WithStyles(Button)>,
              <WithStyles(Button)
                color="primary"
                disabled={true}
                id="comment-submit-button"
                onClick={[Function]}
                type="submit"
                variant="contained"
              >
                Send
                <pure(SendIcon)>
                  send
                </pure(SendIcon)>
              </WithStyles(Button)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Cancel",
                "color": "primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  "Send",
                  <pure(SendIcon)>
                    send
                  </pure(SendIcon)>,
                ],
                "className": undefined,
                "color": "primary",
                "disabled": true,
                "id": "comment-submit-button",
                "onClick": [Function],
                "type": "submit",
                "variant": "contained",
              },
              "ref": null,
              "rendered": Array [
                "Send",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "send",
                    "className": undefined,
                  },
                  "ref": null,
                  "rendered": "send",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
