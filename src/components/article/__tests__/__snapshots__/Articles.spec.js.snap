// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Articles Articles componentWillUnmount renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Articles
    articles={Array []}
    authorId=""
    classes={
      Object {
        "root": "",
      }
    }
    errorMsg={null}
    isLoaded={false}
    isLoading={false}
    onClearArticles={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    onGetAllArticles={[Function]}
    onGetArticlesByAuthorId={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <div>
          No articles yep
        </div>,
        null,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "No articles yep",
          "className": undefined,
        },
        "ref": null,
        "rendered": "No articles yep",
        "type": "div",
      },
      null,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <div>
            No articles yep
          </div>,
          null,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "No articles yep",
            "className": undefined,
          },
          "ref": null,
          "rendered": "No articles yep",
          "type": "div",
        },
        null,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Articles Articles initial + authorId renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Articles
    articles={Array []}
    authorId="123"
    classes={
      Object {
        "root": "",
      }
    }
    errorMsg={null}
    isLoaded={false}
    isLoading={false}
    onClearArticles={[Function]}
    onGetAllArticles={[Function]}
    onGetArticlesByAuthorId={
      [MockFunction] {
        "calls": Array [
          Array [
            "123",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <div>
          No articles yep
        </div>,
        null,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "No articles yep",
          "className": undefined,
        },
        "ref": null,
        "rendered": "No articles yep",
        "type": "div",
      },
      null,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <div>
            No articles yep
          </div>,
          null,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "No articles yep",
            "className": undefined,
          },
          "ref": null,
          "rendered": "No articles yep",
          "type": "div",
        },
        null,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Articles Articles initial renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Articles
    articles={Array []}
    authorId=""
    classes={
      Object {
        "root": "",
      }
    }
    errorMsg={null}
    isLoaded={false}
    isLoading={false}
    onClearArticles={[Function]}
    onGetAllArticles={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    onGetArticlesByAuthorId={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <div>
          No articles yep
        </div>,
        null,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "No articles yep",
          "className": undefined,
        },
        "ref": null,
        "rendered": "No articles yep",
        "type": "div",
      },
      null,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <div>
            No articles yep
          </div>,
          null,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "No articles yep",
            "className": undefined,
          },
          "ref": null,
          "rendered": "No articles yep",
          "type": "div",
        },
        null,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Articles Articles isLoading renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Articles
    articles={Array []}
    authorId=""
    classes={
      Object {
        "root": "",
      }
    }
    errorMsg={null}
    isLoaded={false}
    isLoading={true}
    onClearArticles={[Function]}
    onGetAllArticles={[Function]}
    onGetArticlesByAuthorId={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <div>
          <WithStyles(CircularIndeterminate) />
        </div>,
        null,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(CircularIndeterminate) />,
          "className": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      null,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <div>
            <WithStyles(CircularIndeterminate) />
          </div>,
          null,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(CircularIndeterminate) />,
            "className": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        null,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Articles Articles render <List /> renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Articles
    articles={
      Array [
        Object {
          "_id": "PropTypes.string.isRequired",
          "author_id": "PropTypes.string.isRequired",
          "author_name": "PropTypes.string.isRequired",
          "created_at": "PropTypes.string.isRequired",
          "text": "PropTypes.string.isRequired",
          "title": "PropTypes.string.isRequired",
          "updated_at": "PropTypes.string.isRequired",
        },
      ]
    }
    authorId=""
    classes={
      Object {
        "root": "",
      }
    }
    errorMsg={null}
    isLoaded={true}
    isLoading={false}
    onClearArticles={[Function]}
    onGetAllArticles={[Function]}
    onGetArticlesByAuthorId={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className=""
        >
          <WithStyles(List)
            component="nav"
          >
            <WithStyles(ListItem)>
              <withRouter(Connect(WithStyles(Article)))
                article={
                  Object {
                    "_id": "PropTypes.string.isRequired",
                    "author_id": "PropTypes.string.isRequired",
                    "author_name": "PropTypes.string.isRequired",
                    "created_at": "PropTypes.string.isRequired",
                    "text": "PropTypes.string.isRequired",
                    "title": "PropTypes.string.isRequired",
                    "updated_at": "PropTypes.string.isRequired",
                  }
                }
              />
            </WithStyles(ListItem)>
          </WithStyles(List)>
        </div>,
        <div>
          No articles yep
        </div>,
        null,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(List)
            component="nav"
          >
            <WithStyles(ListItem)>
              <withRouter(Connect(WithStyles(Article)))
                article={
                  Object {
                    "_id": "PropTypes.string.isRequired",
                    "author_id": "PropTypes.string.isRequired",
                    "author_name": "PropTypes.string.isRequired",
                    "created_at": "PropTypes.string.isRequired",
                    "text": "PropTypes.string.isRequired",
                    "title": "PropTypes.string.isRequired",
                    "updated_at": "PropTypes.string.isRequired",
                  }
                }
              />
            </WithStyles(ListItem)>
          </WithStyles(List)>,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(ListItem)>
                <withRouter(Connect(WithStyles(Article)))
                  article={
                    Object {
                      "_id": "PropTypes.string.isRequired",
                      "author_id": "PropTypes.string.isRequired",
                      "author_name": "PropTypes.string.isRequired",
                      "created_at": "PropTypes.string.isRequired",
                      "text": "PropTypes.string.isRequired",
                      "title": "PropTypes.string.isRequired",
                      "updated_at": "PropTypes.string.isRequired",
                    }
                  }
                />
              </WithStyles(ListItem)>,
            ],
            "component": "nav",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "PropTypes.string.isRequired",
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(WithStyles(Article)))
                  article={
                    Object {
                      "_id": "PropTypes.string.isRequired",
                      "author_id": "PropTypes.string.isRequired",
                      "author_name": "PropTypes.string.isRequired",
                      "created_at": "PropTypes.string.isRequired",
                      "text": "PropTypes.string.isRequired",
                      "title": "PropTypes.string.isRequired",
                      "updated_at": "PropTypes.string.isRequired",
                    }
                  }
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "article": Object {
                    "_id": "PropTypes.string.isRequired",
                    "author_id": "PropTypes.string.isRequired",
                    "author_name": "PropTypes.string.isRequired",
                    "created_at": "PropTypes.string.isRequired",
                    "text": "PropTypes.string.isRequired",
                    "title": "PropTypes.string.isRequired",
                    "updated_at": "PropTypes.string.isRequired",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "No articles yep",
          "className": undefined,
        },
        "ref": null,
        "rendered": "No articles yep",
        "type": "div",
      },
      null,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className=""
          >
            <WithStyles(List)
              component="nav"
            >
              <WithStyles(ListItem)>
                <withRouter(Connect(WithStyles(Article)))
                  article={
                    Object {
                      "_id": "PropTypes.string.isRequired",
                      "author_id": "PropTypes.string.isRequired",
                      "author_name": "PropTypes.string.isRequired",
                      "created_at": "PropTypes.string.isRequired",
                      "text": "PropTypes.string.isRequired",
                      "title": "PropTypes.string.isRequired",
                      "updated_at": "PropTypes.string.isRequired",
                    }
                  }
                />
              </WithStyles(ListItem)>
            </WithStyles(List)>
          </div>,
          <div>
            No articles yep
          </div>,
          null,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(List)
              component="nav"
            >
              <WithStyles(ListItem)>
                <withRouter(Connect(WithStyles(Article)))
                  article={
                    Object {
                      "_id": "PropTypes.string.isRequired",
                      "author_id": "PropTypes.string.isRequired",
                      "author_name": "PropTypes.string.isRequired",
                      "created_at": "PropTypes.string.isRequired",
                      "text": "PropTypes.string.isRequired",
                      "title": "PropTypes.string.isRequired",
                      "updated_at": "PropTypes.string.isRequired",
                    }
                  }
                />
              </WithStyles(ListItem)>
            </WithStyles(List)>,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(ListItem)>
                  <withRouter(Connect(WithStyles(Article)))
                    article={
                      Object {
                        "_id": "PropTypes.string.isRequired",
                        "author_id": "PropTypes.string.isRequired",
                        "author_name": "PropTypes.string.isRequired",
                        "created_at": "PropTypes.string.isRequired",
                        "text": "PropTypes.string.isRequired",
                        "title": "PropTypes.string.isRequired",
                        "updated_at": "PropTypes.string.isRequired",
                      }
                    }
                  />
                </WithStyles(ListItem)>,
              ],
              "component": "nav",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "PropTypes.string.isRequired",
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(WithStyles(Article)))
                    article={
                      Object {
                        "_id": "PropTypes.string.isRequired",
                        "author_id": "PropTypes.string.isRequired",
                        "author_name": "PropTypes.string.isRequired",
                        "created_at": "PropTypes.string.isRequired",
                        "text": "PropTypes.string.isRequired",
                        "title": "PropTypes.string.isRequired",
                        "updated_at": "PropTypes.string.isRequired",
                      }
                    }
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "article": Object {
                      "_id": "PropTypes.string.isRequired",
                      "author_id": "PropTypes.string.isRequired",
                      "author_name": "PropTypes.string.isRequired",
                      "created_at": "PropTypes.string.isRequired",
                      "text": "PropTypes.string.isRequired",
                      "title": "PropTypes.string.isRequired",
                      "updated_at": "PropTypes.string.isRequired",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "No articles yep",
            "className": undefined,
          },
          "ref": null,
          "rendered": "No articles yep",
          "type": "div",
        },
        null,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Articles Articles with errorMsg renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Articles
    articles={Array []}
    authorId=""
    classes={
      Object {
        "root": "",
      }
    }
    errorMsg="Something going wrong"
    isLoaded={false}
    isLoading={false}
    onClearArticles={[Function]}
    onGetAllArticles={[Function]}
    onGetArticlesByAuthorId={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <div>
          No articles yep
        </div>,
        <span>
          Something going wrong
        </span>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "No articles yep",
          "className": undefined,
        },
        "ref": null,
        "rendered": "No articles yep",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Something going wrong",
          "className": undefined,
        },
        "ref": null,
        "rendered": "Something going wrong",
        "type": "span",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <div>
            No articles yep
          </div>,
          <span>
            Something going wrong
          </span>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "No articles yep",
            "className": undefined,
          },
          "ref": null,
          "rendered": "No articles yep",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Something going wrong",
            "className": undefined,
          },
          "ref": null,
          "rendered": "Something going wrong",
          "type": "span",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
